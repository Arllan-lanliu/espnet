#!/bin/bash
# Set bash to 'debug' mode, it will exit on :
# -e 'error', -u 'undefined variable', -o ... 'error in pipeline', -x 'print commands',
set -e
set -u
set -o pipefail

log() {
    local fname=${BASH_SOURCE[1]##*/}
    echo -e "$(date '+%Y-%m-%dT%H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $@"
}
help_message=$(cat << EOF
Usage: $0 --train-set <train_set_name> --dev-set <dev_set_name> --eval_sets <eval_set_names> --srctexts <srctexts >

Options:
    --nj (int): The number of parallel jobs
    --decode-nj (int): The number of parallel jobs for decoding
    --ngpu (int): The number of gpus
    --gpu-decode (bool): Use gpu for decoding.
    --stage (int): Processes starts from the specifed stage.
    --stop-stage (int): Processes is stopped at the specifed stage.
    --nlsyms: non-linguistic symbol list
    --oov (str): Out of vocabrary symbol. The default is "<unk>"
    --token_type (str): The tokenize level. Select either one of "bpe", "char" or "word". The default is "bpe"
    --nbpe (int):
EOF
)
SECONDS=0


## general configuration
stage=1
stop_stage=100

nj=50
decode_nj=50
# number of gpus ("0" uses cpu, otherwise use gpu)
ngpu=1
gpu_decode=false


## The options for feature_extract
feats_type=raw
audio_format=flac
fs=16k


# token_type=char
token_type=bpe

nbpe=30
# bpemode (unigram or bpe)
bpemode=unigram
bpe_input_sentence_size=100000000
oov="<unk>"



## The options for training
exp=exp

# Add suffix to the result dir for lm training
lm_tag=
lm_config=
lm_args=
lm_preprocess_config=
use_word_lm=false
word_vocab_size=10000

# Add suffix to the result dir for asr training
asr_tag=
asr_config=
asr_args=
asr_preprocess_config=

decode_tag=
decode_config=
decode_args=
decode_asr_model=eval.loss.best.pt
decode_lm=eval.loss.best.pt
# e.g.
# decode_asr_model=train.loss.best.pt
# decode_asr_model=3epoch/model.pt
# decode_asr_model=eval.acc.best.pt
# decode_asr_model=eval.loss.ave.pt


# [Task depented] Set the datadir name created by local/data.sh
train_set=
dev_set=
eval_sets=
# Used for the training of BPE and the creation of a vocabulary list
srctexts=
lm_train_text=
lm_dev_text=
lm_test_text=
# If non-linguistic symbol list if existing
nlsyms_txt=

log "$0 $*"
. utils/parse_options.sh
. ./path.sh
. ./cmd.sh

if [ $# -ne 0 ]; then
    log "${help_message}"
    log "Error: No positional arguments are required."
    exit 2
fi

[ -z "${train_set}" ] && { log "${help_message}"; log "Error: --train_set is required"; exit 2; };
[ -z "${dev_set}" ] &&   { log "${help_message}"; log "Error: --dev_set is required"  ; exit 2; };
[ -z "${eval_sets}" ] && { log "${help_message}"; log "Error: --eval_sets is required"; exit 2; };
[ -z "${srctexts}" ] &&  { log "${help_message}"; log "Error: --srctexts is required" ; exit 2; };
# Use the same text as ASR for lm training if not specified.
[ -z "${lm_train_text}" ] && lm_train_text="data/${train_set}/text"
[ -z "${lm_dev_text}" ] && lm_dev_text="data/${dev_set}/text"
# Use the text of the 1st evaldir if lm_test is not specified
[ -z "${lm_test_text}" ] && lm_test_text="data/${eval_sets%% *}/text"


if [ "${feats_type}" = raw ]; then
    data_feats=data_format
elif [ "${feats_type}" = fbank_pitch ]; then
    data_feats=data_fbank_pitch
elif [ "${feats_type}" = fbank ]; then
    data_feats=data_fbank
else
    log "${help_message}"
    log "Error: not supported: --feats_type ${feats_type}"
    exit 2
fi

data_asr="data_asr_${feats_type}_${token_type}"
if ${use_word_lm}; then
    data_lm=data_lm_word
    lm_token_type="word"
else
    data_lm="data_lm_${token_type}"
    lm_token_type="${token_type}"
fi

token_listdir=data/token_list
bpedir="${token_listdir}/bpe_${bpemode}${nbpe}"
bpeprefix="${bpedir}"/model
bpemodel="${bpeprefix}".model
bpetoken_list="${bpedir}"/tokens.txt
chartoken_list="${token_listdir}"/char/tokens.txt
wordtoken_list="${token_listdir}"/word/tokens.txt

if [ -z "${asr_tag}" ]; then
    asr_tag="_${feats_type}_${token_type}"
fi
if [ -z "${lm_tag}" ]; then
    lm_tag="_${lm_token_type}"
fi

if [ "${token_type}" = bpe ]; then
    token_list="${bpetoken_list}"
elif [ "${token_type}" = char ]; then
    token_list="${chartoken_list}"
    bpemodel=""
else
    log "Error: not supported --token_type '${token_type}'"
    exit 2
fi


if [ ${stage} -le 1 ] && [ ${stop_stage} -ge 1 ]; then
    log "stage 1: Data preparation for data/${train_set}, data/${dev_set}, etc."
    local/data.sh
fi

# "nlsyms_txt" should be generated by local/data.sh if need
if [ -n "${nlsyms_txt}" ]; then
    nlsyms="$(<${nlsyms_txt})"
else
    nlsyms=
fi


if [ ${stage} -le 2 ] && [ ${stop_stage} -ge 2 ]; then
    if [ "${feats_type}" = raw ]; then
        log "stage 2: Format wav.scp: data/ -> ${data_feats}/"

        # ====== Recreating "wav.scp" ======
        # Kaldi-wav.scp, which can describe the file path with unix-pipe, like "cat /some/path |",
        # shouldn't be used in training process.
        # "format_wav_scp.sh" dumps such pipe-style-wav to real audio file
        # and also it can also change the audio-format and sampling rate.
        # If nothing is need, then format_wav_scp.sh does nothing:
        # i.e. the input file format and rate is same as the output.

        for dset in "${train_set}" "${dev_set}" ${eval_sets}; do
            utils/copy_data_dir.sh data/"${dset}" "${data_feats}/${dset}"
            scripts/audio/format_wav_scp.sh --nj "${nj}" --cmd "${train_cmd}" \
                --audio-format "${audio_format}" --fs "${fs}" \
                "data/${dset}/wav.scp" "${data_feats}/${dset}"

            echo "${feats_type}" > "${data_feats}/${dset}/feats_type"
        done

    elif [ "${feats_type}" = fbank_pitch ]; then
        log "[Require Kaldi] stage 2: ${feats_type} extract: data/ -> ${data_feats}/"

        for dset in "${train_set}" "${dev_set}" ${eval_sets}; do
            # 1. Copy datadir
            utils/copy_data_dir.sh data/"${dset}" "${data_feats}/${dset}"

            # 2. Feature extract
            _nj=$((${nj}<$(<"${data_feats}/${dset}/utt2spk" wc -l)?${nj}:$(<"${data_feats}/${dset}/utt2spk" wc -l)))
            steps/make_fbank_pitch.sh --nj "${_nj}" --cmd "${train_cmd}" "${data_feats}/${dset}"

            # 3. Create feats_shape
            scripts/feats/feat_to_shape.sh --nj "${nj}" --cmd "${train_cmd}" \
                "${data_feats}/${dset}/feats.scp" "${data_feats}/${dset}/feats_shape" "${data_feats}/${dset}/logs"

            echo "${feats_type}" > "${data_feats}/${dset}/feats_type"
        done
        # 4. Compute global cmvn stats.
        # TODO(kamo): Parallelize?
        pyscripts/feats/compute-cmvn-stats.py --out-filetype npy \
            scp:"cat ${data_feats}/${train_set}/feats.scp ${data_feats}/${dev_set}/feats.scp |" \
            "${data_feats}/${train_set}/cmvn.npy"

    elif [ "${feats_type}" = fbank ]; then
        log "stage 2: ${feats_type} extract: data/ -> ${data_feats}/"
        log "Not yet"
        exit 1

    else
        log "Error: not supported: --feats_type ${feats_type}"
        exit 2
    fi
fi


if [ ${stage} -le 3 ] && [ ${stop_stage} -ge 3 ]; then
    if [ "${token_type}" = bpe ]; then
        log "stage 3: Generate token_list from ${srctexts} using BPE"

        mkdir -p "${bpedir}"
        cat ${srctexts} | cut -f 2- -d" "  > "${bpedir}"/train.txt

        spm_train \
            --input="${bpedir}"/train.txt \
            --vocab_size="${nbpe}" \
            --model_type="${bpemode}" \
            --model_prefix="${bpeprefix}" \
            --input_sentence_size="${bpe_input_sentence_size}"

        echo "<unk>" > "${token_list}"
        cat ${srctexts} | cut -f 2- -d" " | \
            spm_encode --model="${bpemodel}" --output_format=piece | \
                tr ' ' '\n' | sort -u >> "${token_list}"

    elif [ "${token_type}" = char ]; then
        log "stage 3: Generate character level token_list from ${srctexts}"
        mkdir -p "$(dirname ${token_list})"


        echo "<unk>" > "${token_list}"
        if [ -n "${nlsyms}" ]; then
            cat ${srctexts} | pyscripts/text/text2token.py -s 1 -n 1 -l "${nlsyms}"  \
                | cut -f 2- -d" " | tr " " "\n" | sort -u \
                | grep -v -e '^\s*$' >> "${token_list}"
        else
            cat ${srctexts} | pyscripts/text/text2token.py -s 1 -n 1 \
                | cut -f 2- -d" " | tr " " "\n" | sort -u \
                | grep -v -e '^\s*$' >> "${token_list}"
        fi
    else
        log "Error: not supported --token_type '${token_type}'"
        exit 2
    fi


    # Create word-list for word-LM training
    if ${use_word_lm}; then
        log "Generate word level token_list from ${srctexts}"
        mkdir -p "$(dirname ${token_list})"
        log "Not yet"
        exit 1

        # TODO(kamo): tokens.txt instead of dict
        # cat ${srctexts} | text2vocabulary.py -s ${word_vocab_size} -o ${dict}
    fi

fi


if [ ${stage} -le 4 ] && [ ${stop_stage} -ge 4 ]; then
    log "stage 4: Create tokens from text: token_list=${token_list}: ${data_feats} -> ${data_asr}, ${data_lm}"

    for dset in "${train_set}" "${dev_set}" ${eval_sets}; do
        # 1. Copy datadir
        utils/copy_data_dir.sh "${data_feats}/${dset}" "${data_asr}/${dset}"
        # Copying extended files from Kaldi-datadir
        for f in utt2num_samples feats_shape feats_type cmvn.npy; do
            [ -e "${data_feats}/${dset}/${f}" ] && \
                cp "${data_feats}/${dset}/${f}" "${data_asr}/${dset}/${f}"
        done

        scripts/text/prepare_token.sh \
            --type "${token_type}" --bpemodel "${bpemodel}" \
                "${data_feats}/${dset}/text" "${token_list}" "${data_asr}/${dset}"
    done

    # Prepares tokens for LM training
    scripts/text/prepare_token.sh \
        --type "${lm_token_type}" --bpemodel "${bpemodel}" \
            "${lm_train_text}" "${token_list}" "${data_lm}"/train
    scripts/text/prepare_token.sh \
        --type "${lm_token_type}" --bpemodel "${bpemodel}" \
            "${lm_dev_text}" "${token_list}" "${data_lm}"/dev
    scripts/text/prepare_token.sh \
        --type "${lm_token_type}" --bpemodel "${bpemodel}" \
            "${lm_test_text}" "${token_list}" "${data_lm}"/test
fi

# ========================== Data preparation is done here. ==========================


lm_exp="${exp}/lm_train${lm_tag}"
if [ ${stage} -le 5 ] && [ ${stop_stage} -ge 5 ]; then
    log "stage 5: LM Training: train_set=${data_lm}/train, dev_set=${data_lm}/dev"

    _opts=
    if [ -n "${lm_config}" ]; then
        # To generate the config file: e.g.
        #   % python -m espnet2.bin.lm_train --print_config --optimizer adam --lm transformer
        _opts+="--config ${lm_config} "
    fi
    if [ -n "${lm_preprocess_config}" ]; then
        _opts+="--train_preprosess input=${lm_preprocess_config} "
        _opts+="--eval_preprosess input=${lm_preprocess_config} "
    fi

    log "LM training started... log: '${lm_exp}/train.log'"
    ${cuda_cmd} --gpu "${ngpu}" "${lm_exp}"/train.log \
        python3 -m espnet2.bin.lm_train \
            --ngpu "${ngpu}" \
            --token_list "${data_lm}/train/tokens.txt" \
            --train_data_path_and_name_and_type "${data_lm}/train/token_int,input,text_int" \
            --eval_data_path_and_name_and_type "${data_lm}/dev/token_int,input,text_int" \
            --train_shape_file "${data_lm}/train/token_shape" \
            --eval_shape_file "${data_lm}/dev/token_shape" \
            --resume_epoch latest \
            --max_length 150 \
            --output_dir "${lm_exp}" \
            ${_opts} ${lm_args}

fi


if [ ${stage} -le 6 ] && [ ${stop_stage} -ge 6 ]; then
    log "stage 6: Calc perplexity: ${data_lm}/test"
    _opts=
    if [ -n "${lm_preprocess_config}" ]; then
        _opts+="--preprosess input=${lm_preprocess_config} "
    fi
    # TODO(kamo): Parallelize?
    log "Perplexity calculation started... log: '${lm_exp}/perplexity_test/lm_calc_perplexity.log'"
    ${cuda_cmd} --gpu "${ngpu}" "${lm_exp}"/perplexity_test/lm_calc_perplexity.log \
        python3 -m espnet2.bin.lm_calc_perplexity \
            --ngpu "${ngpu}" \
            --data_path_and_name_and_type "${data_lm}/test/token_int,input,text_int" \
            --train_config "${lm_exp}"/config.yaml \
            --model_file "${lm_exp}"/eval.loss.best.pt \
            --output_dir "${lm_exp}/perplexity_test" \
            ${_opts}
    log "PPL: ${data_lm}/test: $(cat ${lm_exp}/perplexity_test/ppl)"

fi


asr_exp="${exp}/asr_train${asr_tag}"
if [ ${stage} -le 7 ] && [ ${stop_stage} -ge 7 ]; then
    _asr_train_dir="${data_asr}/${train_set}"
    _asr_dev_dir="${data_asr}/${dev_set}"
    log "stage 7: ASR Training: train_set=${_asr_train_dir}, dev_set=${_asr_dev_dir}"

    _opts=
    if [ -n "${asr_preprocess_config}" ]; then
        # syntax: --train_preprosess {key}={yaml file or yaml string}
        _opts+="--train_preprosess input=${asr_preprocess_config} "
        _opts+="--eval_preprosess input=${asr_preprocess_config} "
    fi
    if [ -n "${asr_config}" ]; then
        # To generate the config file: e.g.
        #   % python -m espnet2.bin.asr_train --print_config --optimizer adam --encoder_decoder transformer
        _opts+="--config ${asr_config} "
    fi

    _feats_type="$(<${_asr_train_dir}/feats_type)"
    if [ "${_feats_type}" = raw ]; then
        _scp=wav.scp
        _shape=utt2num_samples
        # "sound" supports "wav", "flac", etc.
        _type=sound
        _max_length=80000
        _opts+="--frontend_conf fs=${fs} "
    else
        _scp=feats.scp
        _shape=feats_shape
        _type=kaldi_ark
        _max_length=800
        _idim="$(<${_asr_train_dir}/feats_shape head -n1 | cut -d ' ' -f 2 | cut -d',' -f 2)"
        _opts+="--idim=${_idim} "

        # Default normalization is utterance_mvn and changes to global_mvn
        _opts+="--normalize=global_mvn --normalize_conf stats_file=${_asr_train_dir}/cmvn.npy"
    fi


    # FIXME(kamo): max_length is confusing name. How about fold_length?

    log "ASR training started... log: '${asr_exp}/train.log'"
    ${cuda_cmd} --gpu "${ngpu}" "${asr_exp}"/train.log \
        python3 -m espnet2.bin.asr_train \
            --ngpu "${ngpu}" \
            --token_list "${_asr_train_dir}/tokens.txt" \
            --train_data_path_and_name_and_type "${_asr_train_dir}/${_scp},input,${_type}" \
            --train_data_path_and_name_and_type "${_asr_train_dir}/token_int,output,text_int" \
            --eval_data_path_and_name_and_type "${_asr_dev_dir}/${_scp},input,${_type}" \
            --eval_data_path_and_name_and_type "${_asr_dev_dir}/token_int,output,text_int" \
            --train_shape_file "${_asr_train_dir}/${_shape}" \
            --train_shape_file "${_asr_train_dir}/token_shape" \
            --eval_shape_file "${_asr_dev_dir}/${_shape}" \
            --eval_shape_file "${_asr_dev_dir}/token_shape" \
            --resume_epoch latest \
            --max_length "${_max_length}" \
            --max_length 150 \
            --output_dir "${asr_exp}" \
            ${_opts} ${asr_args}

fi


if [ ${stage} -le 8 ] && [ ${stop_stage} -ge 8 ]; then
    log "stage 8: Decoding: training_dir=${asr_exp}"

    if ${gpu_decode}; then
        _cmd=${cuda_cmd}
        _ngpu=1
    else
        _cmd=${decode_cmd}
        _ngpu=0
    fi

    _opts=
    if [ -n "${asr_preprocess_config}" ]; then
        _opts+="--preprosess input=${asr_preprocess_config} "
    fi
    if [ -n "${decode_config}" ]; then
        _opts+="--config ${decode_config} "
    fi

    for dset in ${dev_set} ${eval_sets}; do
        _data="${data_asr}/${dset}"
        _dir="${asr_exp}/decode_${dset}${decode_tag}"
        _logdir="${_dir}/logdir"
        mkdir -p "${_logdir}"

        _feats_type="$(<${_data}/feats_type)"
        if [ "${_feats_type}" = raw ]; then
            _scp=wav.scp
            _type=sound
        else
            _scp=feats.scp
            _type=kaldi_ark
        fi

        # 1. Split the key file
        key_file=${_data}/${_scp}
        split_scps=""
        _nj=$((${decode_nj}<$(<${key_file} wc -l)?${decode_nj}:$(<${key_file} wc -l)))
        for n in $(seq ${_nj}); do
            split_scps+=" ${_logdir}/keys.${n}.scp"
        done
        utils/split_scp.pl "${key_file}" ${split_scps}


        # 2. Submit decoding jobs
        log "Decoding started... log: '${_logdir}/asr_recog.*.log'"
        ${_cmd} --gpu "${_ngpu}" JOB=1:"${_nj}" "${_logdir}"/asr_recog.JOB.log \
            python3 -m espnet2.bin.asr_recog \
                --ngpu "${_ngpu}" \
                --data_path_and_name_and_type "${_data}/${_scp},input,${_type}" \
                --key_file "${_logdir}"/keys.JOB.scp \
                --asr_train_config "${asr_exp}"/config.yaml \
                --asr_model_file "${asr_exp}"/"${decode_asr_model}" \
                --lm_train_config "${lm_exp}"/config.yaml \
                --lm_file "${lm_exp}"/"${decode_lm}" \
                --output_dir "${_logdir}"/output.JOB \
                ${_opts} ${decode_args}

        # 3. Concatenates the output files from each jobs
        for f in token token_int score; do
            for i in $(seq "${_nj}"); do
                cat "${_logdir}/output.${i}/1best_recog/${f}"
            done | LC_ALL=C sort -k1 >"${_dir}/${f}"
        done

        # 4. Convert token to text
        _token_type="$(<${_data}/token_type)"

        if [ "${_token_type}" = bpe ]; then
            paste <(<${_dir}/token cut -f 1 -d" ") \
                <(<${_dir}/token cut -f 2- -d" " \
                  | spm_decode --model=${bpemodel} --input_format=piece \
                  | sed -e "s/▁/ /g") \
                >  ${_dir}/text

        elif [ "${_token_type}" = char ]; then
            paste <(<${_dir}/token cut -f 1 -d" ") \
                <(<${_dir}/token cut -f 2- -d" "  \
                  | sed -e 's/ //g' \
                  | sed -e 's/<space>/ /g' \
                  ) \
                >  ${_dir}/text
        else
            log "Error: not supported --token_type '${_token_type}'"
            exit 2
        fi

    done
fi


if [ ${stage} -le 9 ] && [ ${stop_stage} -ge 9 ]; then
    log "stage 9: Scoring"

    for dset in ${dev_set} ${eval_sets}; do
        _data="${data_asr}/${dset}"
        _dir="${asr_exp}/decode_${dset}${decode_tag}"

        _token_type="$(<${_data}/token_type)"
        if [ "${_token_type}" = char ]; then
            _types="cer wer"
        else
            _types="wer"
        fi

        for _type in ${_types}; do
            if [ "${_type}" = wer ]; then
                text=text
            else
                text=token
            fi

            _scoredir="${_dir}/score_${_type}"
            mkdir -p "${_scoredir}"

            # 1. Covert text to "trn" format
            <"${_data}/${text}" \
                awk ' { s=""; for(i=2;i<=NF;++i){ s=s $i " "; }; print s "(" $1 ")"; } ' \
                    >"${_scoredir}/ref.trn"
            <"${_dir}/${text}" \
                awk ' { s=""; for(i=2;i<=NF;++i){ s=s $i " "; }; print s "(" $1 ")"; } ' \
                    >"${_scoredir}/hyp.trn"

            if [ "${_type}" = char ] && [ -n "${nlsyms}" ]; then
                for f in ref.trn hyp.trn; do
                    cp "${_scoredir}/${f}" "${_scoredir}/${f}.org"
                    pyscripts/text/filt.py -v "${nlsyms}" "${_scoredir}/${f}.org" \
                        >"${_scoredir}/${f}"
                done
            fi

            # 2. Sclite
            sclite \
                -r "${_scoredir}/ref.trn" trn \
                -h "${_scoredir}/hyp.trn" trn \
                -i rm -o all stdout > "${_scoredir}/result.txt"

            log "Write ${_type} result in ${_scoredir}/result.txt"
            grep -e Avg -e SPKR -m 2 "${_scoredir}/result.txt"
        done

    done

fi

log "Successfully finished. [elapsed=${SECONDS}s]"
